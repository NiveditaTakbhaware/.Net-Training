@model MVCpcForm.Models.PcModel

@{
    ViewBag.Title = "create";
}

<h2>create</h2>

@ViewBag.msg
@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    
<div class="form-horizontal">
    <h4>PcModel</h4>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <div class="form-group">
        @Html.LabelFor(model => model.brandname, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @* @Html.EditorFor(model => model.category, new { htmlAttributes = new { @class = "form-control" } })*@
            @Html.DropDownListFor(model => model.brandname, new SelectList(Enum.GetValues(typeof(MVCpcForm.Models.bd))), "Select brand name")
            @Html.ValidationMessageFor(model => model.brandname, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.category, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.category, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.category, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.screensize, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.screensize, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.screensize, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.memory, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.memory, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.memory, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.os, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @*@Html.EditorFor(model => model.memory, new { htmlAttributes = new { @class = "form-control" } })*@
            @Html.DropDownListFor(model => model.os, new SelectList(Enum.GetValues(typeof(MVCpcForm.Models.OS))), "Select OS")
            @Html.ValidationMessageFor(model => model.os, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.color, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.color, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.color, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.img, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @*@Html.EditorFor(model => model.color, new { htmlAttributes = new { @class = "form-control" } })*@
            <input type="file" id="imgModel" name="img" />
            @Html.ValidationMessageFor(model => model.img, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.name, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.name, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.name, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Create" class="btn btn-default" />
        </div>
    </div>
</div>
}

<div>
    @Html.ActionLink("Back to List", "list")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
